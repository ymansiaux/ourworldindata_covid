---
title: "Untitled"
format: html
---


```{python}
import polars as pl
import duckdb
```


```{python}
df = pl.read_csv("data/owid-covid-data.csv").with_columns(
    pl.col("date").str.to_date("%Y-%m-%d")
)

df.head()
```


```{python}
unique_countries = df.select(
    pl.col("iso_code"), pl.col("continent"), pl.col("location")
).unique(maintain_order=True)

ref_table = (
    df.select(["iso_code", "continent", "location"])
    .unique(maintain_order=False)
    .sort("iso_code")
    .with_row_index("id", offset=1)
)

```

```{python}
# clean table df
df_joined = (df
.join(ref_table, on=['iso_code', 'continent', 'location'], how='left')
.drop(["iso_code", "continent", "location"])
)

df_joined.replace_column(0, pl.Series(df_joined["id"]))

df_joined.head()
```






```{python}
unique_countries_sql = duckdb.sql("""
SELECT DISTINCT iso_code, continent, location
FROM df
ORDER BY iso_code
""").pl()


unique_countries_sql = duckdb.sql("""
SELECT *, row_number() OVER (ORDER BY iso_code) as id
FROM unique_countries_sql
""").pl()


unique_countries_sql.head()
```

```{python}
df_joined_sql = duckdb.sql("""
SELECT df.*, ref_table.id
FROM df
LEFT JOIN ref_table ON df.iso_code = ref_table.iso_code AND df.continent = ref_table.continent AND df.location = ref_table.location
ORDER BY df.iso_code
""").pl()

df_joined_sql.head()
```





```{python}
unique_countries = unique_countries.with_columns(pl.int_range(pl.len()).alias("id"))
```


```{python}
unique_countries.head()
```




```{python}
repr(df_joined.columns)

cases_columns = ["id"] +[
    "total_cases",
    "new_cases",
    "new_cases_smoothed",
    "total_cases_per_million",
    "new_cases_per_million",
    "new_cases_smoothed_per_million",
]

deaths_columns = ["id"] + [
    "total_deaths",
    "new_deaths",
    "new_deaths_smoothed",
    "total_deaths_per_million",
    "new_deaths_per_million",
    "new_deaths_smoothed_per_million",
]

hospital_columns = ["id"] + [
    "reproduction_rate",
    "icu_patients",
    "icu_patients_per_million",
    "hosp_patients",
    "hosp_patients_per_million",
    "weekly_icu_admissions",
    "weekly_icu_admissions_per_million",
    "weekly_hosp_admissions",
    "weekly_hosp_admissions_per_million",
]

tests_columns = ["id"] + [
    "total_tests",
    "new_tests",
    "total_tests_per_thousand",
    "new_tests_per_thousand",
    "new_tests_smoothed",
    "new_tests_smoothed_per_thousand",
    "positive_rate",
    "tests_per_case",
    "tests_units",
]

vaccinations_columns = ["id"] + [
    "total_vaccinations",
    "people_vaccinated",
    "people_fully_vaccinated",
    "total_boosters",
    "new_vaccinations",
    "new_vaccinations_smoothed",
    "total_vaccinations_per_hundred",
    "people_vaccinated_per_hundred",
    "people_fully_vaccinated_per_hundred",
    "total_boosters_per_hundred",
    "new_vaccinations_smoothed_per_million",
    "new_people_vaccinated_smoothed",
    "new_people_vaccinated_smoothed_per_hundred",
    "stringency_index",
]

social_columns = ["id"] + [
    "population_density",
    "median_age",
    "aged_65_older",
    "aged_70_older",
    "gdp_per_capita",
    "extreme_poverty",
    "cardiovasc_death_rate",
    "diabetes_prevalence",
    "female_smokers",
    "male_smokers",
    "handwashing_facilities",
    "hospital_beds_per_thousand",
    "life_expectancy",
    "human_development_index",
    "population",
    "excess_mortality_cumulative_absolute",
    "excess_mortality_cumulative",
    "excess_mortality",
    "excess_mortality_cumulative_per_million",
]

df_cases = df_joined.select(cases_columns)
df_deaths = df_joined.select(deaths_columns)
df_hospital = df_joined.select(hospital_columns)
df_tests = df_joined.select(tests_columns)
df_vaccinations = df_joined.select(vaccinations_columns)
df_social = df_joined.select(social_columns)



```


```{python}
 
```